{
  "name": "Android-iconics",
  "tagline": "Android-Iconics - Use any icon font, or vector (.svg) as drawable in your application.",
  "body": "#Android-Iconics  [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.mikepenz/iconics-core/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.mikepenz/iconics-core) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Android--Iconics-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/1164)\r\n\r\n![Image](https://raw.githubusercontent.com/mikepenz/Android-Iconics/feature/next-generation/DEV/github/banner.png)\r\n\r\n> If you are an app developer you will know the problem. You start an app but require many different icons, in different sizes (**ldpi, mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi**), **different colors**, and **different variants**.\r\nIf you get the icons as **vector** (.svg) or there are many changes over the time, you will always have to get the correct drawables again.\r\n\r\n> **This consumes a lot of time!**\r\n\r\nNow there's an **easy, fast, and small** solution for this! The **Android-Iconics** library.\r\n\r\nThis library allows you to include vector icons everywhere in your project. No limits are given.\r\n**Scale with no limit**, use **any Color** at any time, provide a **contour**, and many additional customizations...\r\n\r\nUse the icons in the variation you need them.\r\n\r\n**What do you get**\r\n- No customization limitations (size, color, contour, background, padding, positioning, ...)\r\n- One icon source (no more mdpi, hdpi, ...)\r\n- Flexibility\r\n- If it takes an Drawable, it will also work with the IconicsDrawable!\r\n- Save in APK size\r\n\r\n**Already available fonts**\r\n- [Google Material Design Icons](https://github.com/google/material-design-icons)\r\n- [Material Design Iconic Font](http://zavoloklom.github.io/material-design-iconic-font)\r\n- [Fontawesome](http://fontawesome.io)\r\n- [Meteocons](http://www.alessioatzeni.com/meteocons/)\r\n- [Octicons](https://github.com/github/octicons)\r\n- [Community Material](http://materialdesignicons.com/)\r\n- [Weather Icons](https://erikflowers.github.io/weather-icons/)\r\n- [Typeicons](http://typicons.com/)\r\n- [Entypo](http://www.entypo.com/)\r\n- [Devicon](http://devicon.fr/)\r\n- [Foundation Icons](http://zurb.com/playground/foundation-icon-fonts-3)\r\n- [Ionicons](http://ionicons.com/)\r\n\r\n**Need more?**\r\nProvide additional fonts for you project, or even create your custom font with just the icons you need.\r\n\r\n#Migration\r\n- [MIGRATION GUIDE](https://github.com/mikepenz/Android-Iconics/blob/develop/MIGRATION.md)\r\n\r\n#Setup\r\n\r\n##1. Provide the gradle dependency\r\n```gradle\r\ndependencies {\r\n\tcompile 'com.mikepenz:iconics-core:2.5.11@aar'\r\n}\r\n```\r\n\r\n##2. Choose your desired fonts\r\n```gradle\r\ncompile 'com.mikepenz:google-material-typeface:2.2.0.1.original@aar' \r\ncompile 'com.mikepenz:material-design-iconic-typeface:2.2.0.1@aar'\r\ncompile 'com.mikepenz:fontawesome-typeface:4.6.0.1@aar'\r\ncompile 'com.mikepenz:octicons-typeface:3.2.0.1@aar'\r\ncompile 'com.mikepenz:meteocons-typeface:1.1.0.1@aar'\r\ncompile 'com.mikepenz:community-material-typeface:1.3.41.1@aar'\r\ncompile 'com.mikepenz:weather-icons-typeface:2.0.10.1@aar'\r\ncompile 'com.mikepenz:typeicons-typeface:2.0.7.1@aar'\r\ncompile 'com.mikepenz:entypo-typeface:1.0.0.1@aar'\r\ncompile 'com.mikepenz:devicon-typeface:2.0.0.1@aar'\r\ncompile 'com.mikepenz:foundation-icons-typeface:3.0.0.1@aar'\r\ncompile 'com.mikepenz:ionicons-typeface:2.0.1.1@aar'\r\n```\r\n\r\n##3. Define IconicsLayoutInflater to enable automatic xml icons detection (optional)\r\nSet the `IconicsLayoutInflater` as new `LayoutInflaterFactory`. This will enable automatic icon detection for `TextViews`,`Buttons`, and allow you to set icons on `ImageView`'s via xml. This is compatible with libs which wrap the `baseContext` like [Calligraphy](https://github.com/chrisjenx/Calligraphy).\r\n```java\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    LayoutInflaterCompat.setFactory(getLayoutInflater(), new IconicsLayoutInflater(getDelegate()));\r\n    //...\r\n    super.onCreate(savedInstanceState);\r\n    //...\r\n}\r\n```\r\n\r\n###3. ALTERNATIVE: Inject into Context (optional)\r\nWrap the `Activity` context. This will enable the same features as Step 3.1., but is not compatible with other libs wrapping the `baseContext`.\r\n```java\r\n@Override\r\nprotected void attachBaseContext(Context newBase) {\r\n    super.attachBaseContext(IconicsContextWrapper.wrap(newBase));\r\n}\r\n```\r\n\r\n\r\n#Usage\r\n##Use as drawable\r\n\r\n```java\r\nnew IconicsDrawable(this)\r\n    .icon(FontAwesome.Icon.faw_android)\r\n    .color(Color.RED)\r\n    .sizeDp(24)\r\n```\r\n\r\n##Use via XML\r\n\r\nIf you use the Iconics library via XML provide the icon you want to use in the following syntax: `gmd-favorite` --> `fontId`-`iconName`. A list of the\r\navailable fonts and their `fontId` can be found near the end of the README.md\r\nAll icon names from the default fonts can be found via the [DEMO](https://play.google.com/store/apps/details?id=com.mikepenz.iconics.sample) application.\r\n\r\n####Notation within text\r\nUse the `{` icon-definer `}` syntax\r\n```gson\r\nSome great text with a {faw-android} font awesome icon and {met-wind} meteocons icons.\r\n```\r\n\r\n###As ImageView (only available if you follow Step 3 or inject the context)\r\n```xml\r\n<ImageView\r\n    android:layout_width=\"48dp\"\r\n    android:layout_height=\"48dp\"\r\n    app:ico_color=\"@color/md_red_A200\"\r\n    app:ico_icon=\"gmd-plus-circle\"\r\n    app:ico_size=\"48dp\" />\r\n    \r\n    //other possible attributes\r\n    //app:ico_background_color=\"@android:color/transparent\"\r\n    //app:ico_color=\"@color/md_red_100\"\r\n    //app:ico_contour_color=\"@android:color/transparent\"\r\n    //app:ico_contour_width=\"0dp\"\r\n    //app:ico_corner_radius=\"0dp\"\r\n    //app:ico_icon=\"gmd-plus-circle\"\r\n    //app:ico_offset_x=\"0dp\"\r\n    //app:ico_offset_y=\"0dp\"\r\n    //app:ico_padding=\"0dp\"\r\n    //app:ico_size=\"48dp\"\r\n```\r\n###As TextView (only available if you inject the context)\r\n```xml\r\n<TextView\r\n    android:text=\"{gmd-chart} Chart\"\r\n    android:textColor=\"@android:color/black\"\r\n    android:layout_width=\"wrap_content\"\r\n    android:layout_height=\"56dp\"\r\n    android:textSize=\"16sp\"/>\r\n```\r\n\r\n###Custom Views (if you do NOT follow Step 3 or inject the context)\r\n####As IconicsImageView\r\n```xml\r\n<com.mikepenz.iconics.view.IconicsImageView\r\n    android:layout_width=\"72dp\"\r\n    android:layout_height=\"72dp\"\r\n    app:iiv_color=\"@android:color/holo_red_dark\"\r\n    app:iiv_icon=\"gmd-favorite\" />\r\n```\r\n\r\n####As IconicsTextView\r\n```xml\r\n<com.mikepenz.iconics.view.IconicsTextView\r\n        android:text=\"abc{hif-test}defgh{faw-adjust}ijk{fon-test1}lmnopqrstuv{fon-test2}wxyz\"\r\n        android:textColor=\"@android:color/black\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"56dp\"\r\n        android:textSize=\"16sp\"/>\r\n```\r\n\r\n####As IconicsButton\r\n```xml\r\n<com.mikepenz.iconics.view.IconicsButton\r\n        android:text=\"{faw-adjust} Button\"\r\n        android:layout_width=\"120dp\"\r\n        android:layout_height=\"60dp\"/>\r\n```\r\n\r\n###Automatic XML \r\n\r\n\r\n#Screenshots\r\n\r\n![Image](https://raw.githubusercontent.com/mikepenz/Android-Iconics/develop/DEV/github/screenshots1.jpg)\r\n\r\n\r\n#Available fonts\r\n* [Google Material Design Icons](https://github.com/google/material-design-icons)\r\n  * \"gmd\"\r\n  * **ORIGINAL by Google** compile 'com.mikepenz:google-material-typeface:+.original@aar'\r\n* [Material Design Iconic Font](http://zavoloklom.github.io/material-design-iconic-font)\r\n  * \"gmi\"\r\n  * **Google Material Iconic** compile 'com.mikepenz:material-design-iconic-typeface:+@aar'\r\n* [Fontawesome](http://fontawesome.io)\r\n  * \"faw\"\r\n  * compile 'com.mikepenz:fontawesome-typeface:+@aar'\r\n* [Meteocons](http://www.alessioatzeni.com/meteocons/)\r\n  * \"met\"\r\n  * compile 'com.mikepenz:meteocons-typeface:+@aar'\r\n* [Octicons](https://github.com/github/octicons)\r\n  * \"oct\"\r\n  * compile 'com.mikepenz:octicons-typeface:+@aar'\r\n* [Community Material](http://materialdesignicons.com/)\r\n  * \"cmd\"\r\n  * compile 'com.mikepenz:community-material-typeface:+@aar'\r\n* [Weather Icons](https://erikflowers.github.io/weather-icons/)\r\n  * \"wic\"\r\n  * compile 'com.mikepenz:weather-icons-typeface:+@aar'\r\n* [Typeicons](http://typicons.com/)\r\n  * \"typ\"\r\n  * compile 'com.mikepenz:typeicons-typeface:+@aar'\r\n* [Entypo](http://www.entypo.com/)\r\n  * \"ent\"\r\n  * compile 'com.mikepenz:entypo-typeface:+@aar'\r\n* [Devicon](http://devicon.fr/)\r\n  * \"dev\"\r\n  * compile 'com.mikepenz:devicon-typeface:+@aar'\r\n* [Foundation Icons](http://zurb.com/playground/foundation-icon-fonts-3)\r\n  * \"fou\"\r\n  * compile 'com.mikepenz:foundation-icons-typeface:+@aar'\r\n* [Ionicons](http://ionicons.com/)\r\n  * \"ion\"\r\n  * compile 'com.mikepenz:ionicons-typeface:+@aar'\r\n\r\nLicenses for all included fonts are linked inside the class or can be found on the coresponding repoistories.\r\n\r\n#Advanced Usage\r\n\r\n###Register fonts\r\n\r\nIf you want to add your own custom font, or a GenericFont you have to register this font (before using it). The best place to do this is the `Application`.\r\n```java\r\npublic class CustomApplication extends Application {\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n\r\n        //only required if you add a custom or generic font on your own\r\n        Iconics.init(getApplicationContext());\r\n\r\n        //register custom fonts like this (or also provide a font definition file)\r\n        Iconics.registerFont(new CustomFont());\r\n    }\r\n}\r\n\r\n```\r\n\r\n###Advanced IconicsBuilder\r\nEverything is easy and simple. Right? But now you got a single icon within your textview and you need additional styling?\r\nJust define the style for all icons or only a specific one. You can find this in the PlaygroundActivity of the sample too.\r\n```java\r\nnew Iconics.IconicsBuilder().ctx(this)\r\n                .style(new ForegroundColorSpan(Color.WHITE), new BackgroundColorSpan(Color.BLACK), new RelativeSizeSpan(2f))\r\n                .styleFor(FontAwesome.Icon.faw_adjust, new BackgroundColorSpan(Color.RED))\r\n                .on(tv1)\r\n                .build();\r\n```\r\n\r\n###String icon-key or typeface enum\r\nSometimes you won't like to use the icon-key (\"faw-adjust\") like this, but use the enum provided by a specific font. Both is valid:\r\n```java\r\n  new IconicsDrawable(this, \"faw-adjust\").actionBarSize()\r\n```\r\n```java\r\n  new IconicsDrawable(this, FontAwesome.Icon.faw_adjust).sizeDp(24)\r\n```\r\n\r\n\r\n##Create custom fonts\r\nThis is possible with only the *.ttf and *.css mapping file. And will take you 2 minutes.\r\n\r\nYou can get these two files by downloading a web icon font, or if you want to create your\r\nown custom icon font from *.svg files then you can use following tools:\r\n* [Fontello](http://fontello.com)\r\n* [IcoMoon](http://icomoon.io) \r\n* let me know if you find other tools.\r\n\r\nAfter you got those two files, head over to the icon addon creation tool [android-iconics.mikepenz.com](http://android-iconics.mikepenz.com).\r\nEnter all the information. Add the *.ttf and *.css and click the button. It will generate and download the icon font addon as\r\nzip. (this tool is local only, no files are sent to a server, you can safely use it with any icons)\r\n\r\n#ProGuard\r\nExclude `R` from ProGuard to enable the font addon auto detection\r\n```proguard\r\n-keep class .R\r\n-keep class **.R$* {\r\n    <fields>;\r\n}\r\n```\r\nAll other ProGuard rules are now bundled internally with each font. \r\n\r\n#Demo\r\nYou can try the sample application out. It's on Google Play ;)\r\nhttps://play.google.com/store/apps/details?id=com.mikepenz.iconics.sample\r\n\r\n\r\n#Credits\r\n- [Joan Zapata](https://github.com/JoanZapata) He is the creator of [Android-Iconify](https://github.com/JoanZapata/android-iconify) which gave me the idea of this project. Some core concepts and ideas were reused, but everything is written from scratch.\r\n- [Christopher Jenkins](https://github.com/chrisjenx/) Thanks for the great usage of a custom `ContextWrapper` inside [Calligraphy](https://github.com/chrisjenx/Calligraphy/)\r\n- [Stephan Schober](https://github.com/tehfonsi)\r\n\r\n#Developed By\r\n\r\n* Mike Penz \r\n * [mikepenz.com](http://mikepenz.com) - <mikepenz@gmail.com>\r\n * [paypal.me/mikepenz](http://paypal.me/mikepenz)\r\n\r\n#License\r\n\r\n    Copyright 2016 Mike Penz\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n",
  "google": "UA-56332427-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}